
14.Multiple_ADC_Values_on_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000634  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000764  0800076c  0001076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000764  08000764  0001076c  2**0
                  CONTENTS
  4 .ARM          00000000  08000764  08000764  0001076c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000764  0800076c  0001076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000764  08000764  00010764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000768  08000768  00010768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800076c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800076c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001076c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000642  00000000  00000000  00010795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a9  00000000  00000000  00010dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  00010f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  00011020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fef4  00000000  00000000  000110a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000076c  00000000  00000000  00020f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000544da  00000000  00000000  00021708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00075be2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001c0  00000000  00000000  00075c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800074c 	.word	0x0800074c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800074c 	.word	0x0800074c

08000170 <system_clk>:
#include <stdint.h>
#include "stm32f1xx.h"

void system_clk() // creating a function to configure STM32 clock.Refer project 1 for details
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	RCC->CR |= RCC_CR_HSEON; //HSE is 8Mhz in BluePill.
 8000174:	4b25      	ldr	r3, [pc, #148]	; (800020c <system_clk+0x9c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a24      	ldr	r2, [pc, #144]	; (800020c <system_clk+0x9c>)
 800017a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800017e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000180:	bf00      	nop
 8000182:	4b22      	ldr	r3, [pc, #136]	; (800020c <system_clk+0x9c>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800018a:	2b00      	cmp	r3, #0
 800018c:	d0f9      	beq.n	8000182 <system_clk+0x12>
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 800018e:	4b20      	ldr	r3, [pc, #128]	; (8000210 <system_clk+0xa0>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a1f      	ldr	r2, [pc, #124]	; (8000210 <system_clk+0xa0>)
 8000194:	f043 0310 	orr.w	r3, r3, #16
 8000198:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_1;
 800019a:	4b1d      	ldr	r3, [pc, #116]	; (8000210 <system_clk+0xa0>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a1c      	ldr	r2, [pc, #112]	; (8000210 <system_clk+0xa0>)
 80001a0:	f043 0302 	orr.w	r3, r3, #2
 80001a4:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80001a6:	4b19      	ldr	r3, [pc, #100]	; (800020c <system_clk+0x9c>)
 80001a8:	685b      	ldr	r3, [r3, #4]
 80001aa:	4a18      	ldr	r2, [pc, #96]	; (800020c <system_clk+0x9c>)
 80001ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001b0:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE;
 80001b2:	4b16      	ldr	r3, [pc, #88]	; (800020c <system_clk+0x9c>)
 80001b4:	4a15      	ldr	r2, [pc, #84]	; (800020c <system_clk+0x9c>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL4; // 8MHz * 4= 32Mhz of system clock
 80001ba:	4b14      	ldr	r3, [pc, #80]	; (800020c <system_clk+0x9c>)
 80001bc:	685b      	ldr	r3, [r3, #4]
 80001be:	4a13      	ldr	r2, [pc, #76]	; (800020c <system_clk+0x9c>)
 80001c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001c4:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV1 | RCC_CFGR_PPRE2_DIV1 | RCC_CFGR_HPRE_DIV1);
 80001c6:	4b11      	ldr	r3, [pc, #68]	; (800020c <system_clk+0x9c>)
 80001c8:	4a10      	ldr	r2, [pc, #64]	; (800020c <system_clk+0x9c>)
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 80001ce:	4b0f      	ldr	r3, [pc, #60]	; (800020c <system_clk+0x9c>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a0e      	ldr	r2, [pc, #56]	; (800020c <system_clk+0x9c>)
 80001d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001d8:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 80001da:	bf00      	nop
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <system_clk+0x9c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d0f9      	beq.n	80001dc <system_clk+0x6c>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <system_clk+0x9c>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <system_clk+0x9c>)
 80001ee:	f043 0302 	orr.w	r3, r3, #2
 80001f2:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 80001f4:	bf00      	nop
 80001f6:	4b05      	ldr	r3, [pc, #20]	; (800020c <system_clk+0x9c>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	f003 0308 	and.w	r3, r3, #8
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0f9      	beq.n	80001f6 <system_clk+0x86>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40021000 	.word	0x40021000
 8000210:	40022000 	.word	0x40022000

08000214 <SysTick_init>:
void SysTick_init()// using Systick timer to create delays in order of milliseconds
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
	SysTick->CTRL=0; 			// initializing the systick control register with all reset values
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <SysTick_init+0x38>)
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD=0x00FFFFFF; 	// putting the max value in systick load register
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <SysTick_init+0x38>)
 8000220:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000224:	605a      	str	r2, [r3, #4]
	SysTick->VAL=0; 			//setting 0 value initially
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <SysTick_init+0x38>)
 8000228:	2200      	movs	r2, #0
 800022a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; // setting AHB clock as systick clock source
 800022c:	4b07      	ldr	r3, [pc, #28]	; (800024c <SysTick_init+0x38>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a06      	ldr	r2, [pc, #24]	; (800024c <SysTick_init+0x38>)
 8000232:	f043 0304 	orr.w	r3, r3, #4
 8000236:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // enable the systick timer
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <SysTick_init+0x38>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a03      	ldr	r2, [pc, #12]	; (800024c <SysTick_init+0x38>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6013      	str	r3, [r2, #0]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	e000e010 	.word	0xe000e010

08000250 <delay_ms>:
void delay_ms(uint16_t x)
{	// as our clock is running at 32MHz and we need 1 Millisecond delay, we need to put a
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	80fb      	strh	r3, [r7, #6]
	// value 1000 times smaller than the AHB clock value in the SysTick load register.
	// Since it counts till 0, the LOAD value will be 31999 or (32000-1)
	//Here x represents the time in milliseconds for which we want the delay
	for(;x>0;x--)
 800025a:	e010      	b.n	800027e <delay_ms+0x2e>
	{
	SysTick->LOAD= (32000-1);
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <delay_ms+0x40>)
 800025e:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000262:	605a      	str	r2, [r3, #4]
	SysTick->VAL=0;	// loading the current value as 0
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <delay_ms+0x40>)
 8000266:	2200      	movs	r2, #0
 8000268:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)==0);
 800026a:	bf00      	nop
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <delay_ms+0x40>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000274:	2b00      	cmp	r3, #0
 8000276:	d0f9      	beq.n	800026c <delay_ms+0x1c>
	for(;x>0;x--)
 8000278:	88fb      	ldrh	r3, [r7, #6]
 800027a:	3b01      	subs	r3, #1
 800027c:	80fb      	strh	r3, [r7, #6]
 800027e:	88fb      	ldrh	r3, [r7, #6]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1eb      	bne.n	800025c <delay_ms+0xc>
	}
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	e000e010 	.word	0xe000e010

08000294 <ADC_init>:
//initializing the ADC_init function with sequence length of 2 conversions
void ADC_init() //using ADC1 and GPIOA Pin 5(PA5) and GPIOA Pin 6(PA6)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	//Configuring ADC1 and using the ADC5 and ADC6 i.e. PA5 and PA6 pin of STM32 for analog reading
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;	// enable the clock for GPIOA peripheral
 8000298:	4b5e      	ldr	r3, [pc, #376]	; (8000414 <ADC_init+0x180>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a5d      	ldr	r2, [pc, #372]	; (8000414 <ADC_init+0x180>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;	// enabling the clock to the ADC peripheral
 80002a4:	4b5b      	ldr	r3, [pc, #364]	; (8000414 <ADC_init+0x180>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a5a      	ldr	r2, [pc, #360]	; (8000414 <ADC_init+0x180>)
 80002aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ae:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; // enabling the alternate function
 80002b0:	4b58      	ldr	r3, [pc, #352]	; (8000414 <ADC_init+0x180>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a57      	ldr	r2, [pc, #348]	; (8000414 <ADC_init+0x180>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= ~(GPIO_CRL_CNF5_1); 	//setting GPIOA pin 5 configuration as analog input mode
 80002bc:	4b56      	ldr	r3, [pc, #344]	; (8000418 <ADC_init+0x184>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a55      	ldr	r2, [pc, #340]	; (8000418 <ADC_init+0x184>)
 80002c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80002c6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(GPIO_CRL_CNF5_0);   //setting GPIOA pin 5 configuration as analog input mode
 80002c8:	4b53      	ldr	r3, [pc, #332]	; (8000418 <ADC_init+0x184>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a52      	ldr	r2, [pc, #328]	; (8000418 <ADC_init+0x184>)
 80002ce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80002d2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(GPIO_CRL_CNF6_1); 	//setting GPIOA pin 6 configuration as analog input mode
 80002d4:	4b50      	ldr	r3, [pc, #320]	; (8000418 <ADC_init+0x184>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a4f      	ldr	r2, [pc, #316]	; (8000418 <ADC_init+0x184>)
 80002da:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002de:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(GPIO_CRL_CNF6_0);   //setting GPIOA pin 6 configuration as analog input mode
 80002e0:	4b4d      	ldr	r3, [pc, #308]	; (8000418 <ADC_init+0x184>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a4c      	ldr	r2, [pc, #304]	; (8000418 <ADC_init+0x184>)
 80002e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80002ea:	6013      	str	r3, [r2, #0]
	// The mode of all pins is by default set as input, no bits to be set in the MODE bits

	ADC1->CR2 &= ~(ADC_CR2_ADON); //disabling the ADC prior to any configurations
 80002ec:	4b4b      	ldr	r3, [pc, #300]	; (800041c <ADC_init+0x188>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	4a4a      	ldr	r2, [pc, #296]	; (800041c <ADC_init+0x188>)
 80002f2:	f023 0301 	bic.w	r3, r3, #1
 80002f6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV4 ; // dividing the bus clock by 4. So we get 8Mhz for 32 Mhz bus clock
 80002f8:	4b46      	ldr	r3, [pc, #280]	; (8000414 <ADC_init+0x180>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	4a45      	ldr	r2, [pc, #276]	; (8000414 <ADC_init+0x180>)
 80002fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000302:	6053      	str	r3, [r2, #4]

	ADC1->SMPR2 |= ADC_SMPR2_SMP5_0 | ADC_SMPR2_SMP5_1 | ADC_SMPR2_SMP5_2; // setting the max sample time for better readings
 8000304:	4b45      	ldr	r3, [pc, #276]	; (800041c <ADC_init+0x188>)
 8000306:	691b      	ldr	r3, [r3, #16]
 8000308:	4a44      	ldr	r2, [pc, #272]	; (800041c <ADC_init+0x188>)
 800030a:	f443 3360 	orr.w	r3, r3, #229376	; 0x38000
 800030e:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= ADC_SMPR2_SMP6_0 | ADC_SMPR2_SMP6_1 | ADC_SMPR2_SMP6_2; // setting the max sample time for better readings
 8000310:	4b42      	ldr	r3, [pc, #264]	; (800041c <ADC_init+0x188>)
 8000312:	691b      	ldr	r3, [r3, #16]
 8000314:	4a41      	ldr	r2, [pc, #260]	; (800041c <ADC_init+0x188>)
 8000316:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800031a:	6113      	str	r3, [r2, #16]

	ADC1->SQR1|=  ADC_SQR1_L_0;  // setting the sequence length for 2 conversions
 800031c:	4b3f      	ldr	r3, [pc, #252]	; (800041c <ADC_init+0x188>)
 800031e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000320:	4a3e      	ldr	r2, [pc, #248]	; (800041c <ADC_init+0x188>)
 8000322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000326:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1&=~(ADC_SQR1_L_1); // setting the sequence length for 2 conversions
 8000328:	4b3c      	ldr	r3, [pc, #240]	; (800041c <ADC_init+0x188>)
 800032a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800032c:	4a3b      	ldr	r2, [pc, #236]	; (800041c <ADC_init+0x188>)
 800032e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000332:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1&=~(ADC_SQR1_L_2); // setting the sequence length for 2 conversions
 8000334:	4b39      	ldr	r3, [pc, #228]	; (800041c <ADC_init+0x188>)
 8000336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000338:	4a38      	ldr	r2, [pc, #224]	; (800041c <ADC_init+0x188>)
 800033a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800033e:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1&=~(ADC_SQR1_L_3); // setting the sequence length for 2 conversions
 8000340:	4b36      	ldr	r3, [pc, #216]	; (800041c <ADC_init+0x188>)
 8000342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000344:	4a35      	ldr	r2, [pc, #212]	; (800041c <ADC_init+0x188>)
 8000346:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800034a:	62d3      	str	r3, [r2, #44]	; 0x2c

	ADC1->SQR3 |= ADC_SQR3_SQ1_0; 	//setting up channel 5 as first sequence
 800034c:	4b33      	ldr	r3, [pc, #204]	; (800041c <ADC_init+0x188>)
 800034e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000350:	4a32      	ldr	r2, [pc, #200]	; (800041c <ADC_init+0x188>)
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 &= ~(ADC_SQR3_SQ1_1);//setting up channel 5 as first sequence
 8000358:	4b30      	ldr	r3, [pc, #192]	; (800041c <ADC_init+0x188>)
 800035a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800035c:	4a2f      	ldr	r2, [pc, #188]	; (800041c <ADC_init+0x188>)
 800035e:	f023 0302 	bic.w	r3, r3, #2
 8000362:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ1_2; 	//setting up channel 5 as first sequence
 8000364:	4b2d      	ldr	r3, [pc, #180]	; (800041c <ADC_init+0x188>)
 8000366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000368:	4a2c      	ldr	r2, [pc, #176]	; (800041c <ADC_init+0x188>)
 800036a:	f043 0304 	orr.w	r3, r3, #4
 800036e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 &= ~(ADC_SQR3_SQ1_3);//setting up channel 5 as first sequence
 8000370:	4b2a      	ldr	r3, [pc, #168]	; (800041c <ADC_init+0x188>)
 8000372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000374:	4a29      	ldr	r2, [pc, #164]	; (800041c <ADC_init+0x188>)
 8000376:	f023 0308 	bic.w	r3, r3, #8
 800037a:	6353      	str	r3, [r2, #52]	; 0x34

	ADC1->SQR3 &= ~(ADC_SQR3_SQ2_0);//setting up channel 6 as second sequence
 800037c:	4b27      	ldr	r3, [pc, #156]	; (800041c <ADC_init+0x188>)
 800037e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000380:	4a26      	ldr	r2, [pc, #152]	; (800041c <ADC_init+0x188>)
 8000382:	f023 0320 	bic.w	r3, r3, #32
 8000386:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ2_1;	//setting up channel 6 as second sequence
 8000388:	4b24      	ldr	r3, [pc, #144]	; (800041c <ADC_init+0x188>)
 800038a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800038c:	4a23      	ldr	r2, [pc, #140]	; (800041c <ADC_init+0x188>)
 800038e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000392:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ2_2; 	//setting up channel 6 as second sequence
 8000394:	4b21      	ldr	r3, [pc, #132]	; (800041c <ADC_init+0x188>)
 8000396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000398:	4a20      	ldr	r2, [pc, #128]	; (800041c <ADC_init+0x188>)
 800039a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800039e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 &= ~(ADC_SQR3_SQ2_3);//setting up channel 6 as second sequence
 80003a0:	4b1e      	ldr	r3, [pc, #120]	; (800041c <ADC_init+0x188>)
 80003a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003a4:	4a1d      	ldr	r2, [pc, #116]	; (800041c <ADC_init+0x188>)
 80003a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003aa:	6353      	str	r3, [r2, #52]	; 0x34

	ADC1->CR2 |= ADC_CR2_CONT; //enabling the continuous mode
 80003ac:	4b1b      	ldr	r3, [pc, #108]	; (800041c <ADC_init+0x188>)
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	4a1a      	ldr	r2, [pc, #104]	; (800041c <ADC_init+0x188>)
 80003b2:	f043 0302 	orr.w	r3, r3, #2
 80003b6:	6093      	str	r3, [r2, #8]
	ADC1->CR1 |= ADC_CR1_SCAN; //enabling the scan mode in case of multiple conversions
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <ADC_init+0x188>)
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	4a17      	ldr	r2, [pc, #92]	; (800041c <ADC_init+0x188>)
 80003be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003c2:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= ADC_CR2_DMA;  //enable the DMA access to this peripheral
 80003c4:	4b15      	ldr	r3, [pc, #84]	; (800041c <ADC_init+0x188>)
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	4a14      	ldr	r2, [pc, #80]	; (800041c <ADC_init+0x188>)
 80003ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ce:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_ADON; //enabling the ADC
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <ADC_init+0x188>)
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a11      	ldr	r2, [pc, #68]	; (800041c <ADC_init+0x188>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6093      	str	r3, [r2, #8]
	delay_ms(1); // slight delay
 80003dc:	2001      	movs	r0, #1
 80003de:	f7ff ff37 	bl	8000250 <delay_ms>
	ADC1->CR2 |= ADC_CR2_ADON; //enabling the ADC for 2nd time to actually enable ADC
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <ADC_init+0x188>)
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	4a0d      	ldr	r2, [pc, #52]	; (800041c <ADC_init+0x188>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_CAL; // enable the calibration. The bit turns 0 when calibration is completed
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <ADC_init+0x188>)
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	4a0a      	ldr	r2, [pc, #40]	; (800041c <ADC_init+0x188>)
 80003f4:	f043 0304 	orr.w	r3, r3, #4
 80003f8:	6093      	str	r3, [r2, #8]
	while(ADC1->CR2 & ADC_CR2_CAL); // wait until the calibration is completed.
 80003fa:	bf00      	nop
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <ADC_init+0x188>)
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	2b00      	cmp	r3, #0
 8000406:	d1f9      	bne.n	80003fc <ADC_init+0x168>
	delay_ms(1); // slight delay
 8000408:	2001      	movs	r0, #1
 800040a:	f7ff ff21 	bl	8000250 <delay_ms>
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000
 8000418:	40010800 	.word	0x40010800
 800041c:	40012400 	.word	0x40012400

08000420 <DMA_Config>:
uint16_t ADCsamples[2]={0,0};
void DMA_Config() // initializing the DMA to access and store 2 ADC values from PA5 and PA6
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
	DMA1_Channel1->CCR &=~(DMA_CCR_EN); // disable the DMA prior to any settings
 8000424:	4b21      	ldr	r3, [pc, #132]	; (80004ac <DMA_Config+0x8c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a20      	ldr	r2, [pc, #128]	; (80004ac <DMA_Config+0x8c>)
 800042a:	f023 0301 	bic.w	r3, r3, #1
 800042e:	6013      	str	r3, [r2, #0]

	RCC->AHBENR|= RCC_AHBENR_DMA1EN; // enabling clock to DMA1.
 8000430:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <DMA_Config+0x90>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4a1e      	ldr	r2, [pc, #120]	; (80004b0 <DMA_Config+0x90>)
 8000436:	f043 0301 	orr.w	r3, r3, #1
 800043a:	6153      	str	r3, [r2, #20]
	DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR); // specifying the address of the Data Register of ADC1
 800043c:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <DMA_Config+0x8c>)
 800043e:	4a1d      	ldr	r2, [pc, #116]	; (80004b4 <DMA_Config+0x94>)
 8000440:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)ADCsamples; // specifying the memory address where data will be stored
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <DMA_Config+0x8c>)
 8000444:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <DMA_Config+0x98>)
 8000446:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CNDTR=2; // number of data to be transferred
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <DMA_Config+0x8c>)
 800044a:	2202      	movs	r2, #2
 800044c:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CCR|= DMA_CCR_CIRC; //enable the circular mode
 800044e:	4b17      	ldr	r3, [pc, #92]	; (80004ac <DMA_Config+0x8c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a16      	ldr	r2, [pc, #88]	; (80004ac <DMA_Config+0x8c>)
 8000454:	f043 0320 	orr.w	r3, r3, #32
 8000458:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR|= DMA_CCR_MINC; //enable the memory increment mode
 800045a:	4b14      	ldr	r3, [pc, #80]	; (80004ac <DMA_Config+0x8c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a13      	ldr	r2, [pc, #76]	; (80004ac <DMA_Config+0x8c>)
 8000460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000464:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR|= DMA_CCR_PSIZE_0; 	 //specify the peripheral size
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <DMA_Config+0x8c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a10      	ldr	r2, [pc, #64]	; (80004ac <DMA_Config+0x8c>)
 800046c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000470:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &=~(DMA_CCR_PSIZE_1); //specify the peripheral size
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <DMA_Config+0x8c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <DMA_Config+0x8c>)
 8000478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800047c:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR|= DMA_CCR_MSIZE_0; 	 //specify the memory size
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <DMA_Config+0x8c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <DMA_Config+0x8c>)
 8000484:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000488:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &=~(DMA_CCR_MSIZE_1); //specify the memory size
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <DMA_Config+0x8c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a07      	ldr	r2, [pc, #28]	; (80004ac <DMA_Config+0x8c>)
 8000490:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000494:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR |= DMA_CCR_EN; // enabling the DMA
 8000496:	4b05      	ldr	r3, [pc, #20]	; (80004ac <DMA_Config+0x8c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a04      	ldr	r2, [pc, #16]	; (80004ac <DMA_Config+0x8c>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6013      	str	r3, [r2, #0]
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40020008 	.word	0x40020008
 80004b0:	40021000 	.word	0x40021000
 80004b4:	4001244c 	.word	0x4001244c
 80004b8:	2000001c 	.word	0x2000001c

080004bc <USART_PinConfig>:
void USART_PinConfig()
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
	//enable the clock for USART2 and GPIOA pins
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Enable the clock to USART2
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <USART_PinConfig+0x54>)
 80004c2:	69db      	ldr	r3, [r3, #28]
 80004c4:	4a12      	ldr	r2, [pc, #72]	; (8000510 <USART_PinConfig+0x54>)
 80004c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ca:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; //Enable clock to GPIOA
 80004cc:	4b10      	ldr	r3, [pc, #64]	; (8000510 <USART_PinConfig+0x54>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <USART_PinConfig+0x54>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; //Enable the Alternate function clock
 80004d8:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <USART_PinConfig+0x54>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a0c      	ldr	r2, [pc, #48]	; (8000510 <USART_PinConfig+0x54>)
 80004de:	f043 0301 	orr.w	r3, r3, #1
 80004e2:	6193      	str	r3, [r2, #24]

	//configure the pin PA2 as output(TX) for alternate function
	GPIOA->CRL |= ( GPIO_CRL_MODE2_1 | GPIO_CRL_MODE2_0 ); //setting output speed of PA2 to max 50Mhz
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <USART_PinConfig+0x58>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <USART_PinConfig+0x58>)
 80004ea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80004ee:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF2_1;    //setting as Alternate function output push pull
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <USART_PinConfig+0x58>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a07      	ldr	r2, [pc, #28]	; (8000514 <USART_PinConfig+0x58>)
 80004f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004fa:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(GPIO_CRL_CNF2_0); //setting as Alternate function output push pull
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <USART_PinConfig+0x58>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a04      	ldr	r2, [pc, #16]	; (8000514 <USART_PinConfig+0x58>)
 8000502:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000506:	6013      	str	r3, [r2, #0]
	//configure the pin PA3 as input(RX) for alternate function
	// As the defaults of PA3 are set as input, we do not need to make additional changes
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000
 8000514:	40010800 	.word	0x40010800

08000518 <USART_BaudRate>:
void USART_BaudRate()
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	USART2->BRR = 0xd05; //for baud of 9600 at 32Mhz bus clock.
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <USART_BaudRate+0x14>)
 800051e:	f640 5205 	movw	r2, #3333	; 0xd05
 8000522:	609a      	str	r2, [r3, #8]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	40004400 	.word	0x40004400

08000530 <USART_Init>:
void USART_Init()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	USART_PinConfig(); //initialize the pins PA2 and PA3 as Tx and Rx
 8000534:	f7ff ffc2 	bl	80004bc <USART_PinConfig>
	//Set up the baud rate
	USART_BaudRate();
 8000538:	f7ff ffee 	bl	8000518 <USART_BaudRate>
	//Enable the USART, Transmit and Receive
	USART2->CR1 |= USART_CR1_UE; //enable the USART
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <USART_Init+0x40>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <USART_Init+0x40>)
 8000542:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000546:	60d3      	str	r3, [r2, #12]
	//setting the word length
	USART2->CR1 &= ~(USART_CR1_M); // 1 start bit, 8 data bits and n stop bit
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <USART_Init+0x40>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	4a08      	ldr	r2, [pc, #32]	; (8000570 <USART_Init+0x40>)
 800054e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000552:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_TE;   //USART2 transmit enable
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <USART_Init+0x40>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <USART_Init+0x40>)
 800055a:	f043 0308 	orr.w	r3, r3, #8
 800055e:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;   //USART2 transmit enable
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <USART_Init+0x40>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	4a02      	ldr	r2, [pc, #8]	; (8000570 <USART_Init+0x40>)
 8000566:	f043 0304 	orr.w	r3, r3, #4
 800056a:	60d3      	str	r3, [r2, #12]

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40004400 	.word	0x40004400

08000574 <USART_TransmitByte>:
void USART_TransmitByte(uint8_t byte)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & USART_SR_TXE)); // we are checking if the transmit data register is empty
 800057e:	bf00      	nop
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <USART_TransmitByte+0x38>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000588:	2b00      	cmp	r3, #0
 800058a:	d0f9      	beq.n	8000580 <USART_TransmitByte+0xc>
	USART2->DR = byte; //loading the contents to the data register
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <USART_TransmitByte+0x38>)
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & USART_SR_TC)); // checking if the data transmit has been completed by checking the status of TC bit
 8000592:	bf00      	nop
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <USART_TransmitByte+0x38>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800059c:	2b00      	cmp	r3, #0
 800059e:	d0f9      	beq.n	8000594 <USART_TransmitByte+0x20>
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	40004400 	.word	0x40004400

080005b0 <USART_NewLine>:
void USART_NewLine()
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	USART_TransmitByte('\n');
 80005b4:	200a      	movs	r0, #10
 80005b6:	f7ff ffdd 	bl	8000574 <USART_TransmitByte>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <USART_TransmitNumber>:
void USART_TransmitNumber(uint32_t val)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	unsigned char buf[5];
	int8_t ptr;
	for(ptr=0;ptr<5;++ptr)
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	e01c      	b.n	8000608 <USART_TransmitNumber+0x48>
	{
		buf[ptr] = (val % 10) + '0';
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <USART_TransmitNumber+0xa8>)
 80005d2:	fba3 2301 	umull	r2, r3, r3, r1
 80005d6:	08da      	lsrs	r2, r3, #3
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	1aca      	subs	r2, r1, r3
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005e8:	3230      	adds	r2, #48	; 0x30
 80005ea:	b2d2      	uxtb	r2, r2
 80005ec:	3310      	adds	r3, #16
 80005ee:	443b      	add	r3, r7
 80005f0:	f803 2c08 	strb.w	r2, [r3, #-8]
		val /= 10;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <USART_TransmitNumber+0xa8>)
 80005f8:	fba2 2303 	umull	r2, r3, r2, r3
 80005fc:	08db      	lsrs	r3, r3, #3
 80005fe:	607b      	str	r3, [r7, #4]
	for(ptr=0;ptr<5;++ptr)
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	3301      	adds	r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800060c:	2b04      	cmp	r3, #4
 800060e:	ddde      	ble.n	80005ce <USART_TransmitNumber+0xe>
	}
	for(ptr=4;ptr>0;--ptr)
 8000610:	2304      	movs	r3, #4
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	e00b      	b.n	800062e <USART_TransmitNumber+0x6e>
	{
		if (buf[ptr] != '0')
 8000616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800061a:	3310      	adds	r3, #16
 800061c:	443b      	add	r3, r7
 800061e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000622:	2b30      	cmp	r3, #48	; 0x30
 8000624:	d108      	bne.n	8000638 <USART_TransmitNumber+0x78>
	for(ptr=4;ptr>0;--ptr)
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	3b01      	subs	r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000632:	2b00      	cmp	r3, #0
 8000634:	dcef      	bgt.n	8000616 <USART_TransmitNumber+0x56>
 8000636:	e00e      	b.n	8000656 <USART_TransmitNumber+0x96>
		break;
 8000638:	bf00      	nop
	}
	for(;ptr>=0;--ptr)
 800063a:	e00c      	b.n	8000656 <USART_TransmitNumber+0x96>
	{
		USART_TransmitByte(buf[ptr]);
 800063c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000640:	3310      	adds	r3, #16
 8000642:	443b      	add	r3, r7
 8000644:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff93 	bl	8000574 <USART_TransmitByte>
	for(;ptr>=0;--ptr)
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	3b01      	subs	r3, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	73fb      	strb	r3, [r7, #15]
 8000656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800065a:	2b00      	cmp	r3, #0
 800065c:	daee      	bge.n	800063c <USART_TransmitNumber+0x7c>
	}
}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	cccccccd 	.word	0xcccccccd

0800066c <main>:

int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
system_clk();
 8000670:	f7ff fd7e 	bl	8000170 <system_clk>
SysTick_init();
 8000674:	f7ff fdce 	bl	8000214 <SysTick_init>
ADC_init();
 8000678:	f7ff fe0c 	bl	8000294 <ADC_init>
DMA_Config();
 800067c:	f7ff fed0 	bl	8000420 <DMA_Config>
USART_Init();
 8000680:	f7ff ff56 	bl	8000530 <USART_Init>

	while(1)
	{
		USART_TransmitNumber(ADCsamples[0]);
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <main+0x40>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff99 	bl	80005c0 <USART_TransmitNumber>
		USART_TransmitByte(' ');
 800068e:	2020      	movs	r0, #32
 8000690:	f7ff ff70 	bl	8000574 <USART_TransmitByte>
		USART_TransmitNumber(ADCsamples[1]);
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <main+0x40>)
 8000696:	885b      	ldrh	r3, [r3, #2]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff91 	bl	80005c0 <USART_TransmitNumber>
		USART_NewLine();
 800069e:	f7ff ff87 	bl	80005b0 <USART_NewLine>

		delay_ms(100);
 80006a2:	2064      	movs	r0, #100	; 0x64
 80006a4:	f7ff fdd4 	bl	8000250 <delay_ms>
		USART_TransmitNumber(ADCsamples[0]);
 80006a8:	e7ec      	b.n	8000684 <main+0x18>
 80006aa:	bf00      	nop
 80006ac:	2000001c 	.word	0x2000001c

080006b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <LoopForever+0x6>)
  ldr r1, =_edata
 80006ba:	490d      	ldr	r1, [pc, #52]	; (80006f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006bc:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <LoopForever+0xe>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d0:	4c0a      	ldr	r4, [pc, #40]	; (80006fc <LoopForever+0x16>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006de:	f000 f811 	bl	8000704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e2:	f7ff ffc3 	bl	800066c <main>

080006e6 <LoopForever>:

LoopForever:
    b LoopForever
 80006e6:	e7fe      	b.n	80006e6 <LoopForever>
  ldr   r0, =_estack
 80006e8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006f4:	0800076c 	.word	0x0800076c
  ldr r2, =_sbss
 80006f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006fc:	20000020 	.word	0x20000020

08000700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC1_2_IRQHandler>
	...

08000704 <__libc_init_array>:
 8000704:	b570      	push	{r4, r5, r6, lr}
 8000706:	2600      	movs	r6, #0
 8000708:	4d0c      	ldr	r5, [pc, #48]	; (800073c <__libc_init_array+0x38>)
 800070a:	4c0d      	ldr	r4, [pc, #52]	; (8000740 <__libc_init_array+0x3c>)
 800070c:	1b64      	subs	r4, r4, r5
 800070e:	10a4      	asrs	r4, r4, #2
 8000710:	42a6      	cmp	r6, r4
 8000712:	d109      	bne.n	8000728 <__libc_init_array+0x24>
 8000714:	f000 f81a 	bl	800074c <_init>
 8000718:	2600      	movs	r6, #0
 800071a:	4d0a      	ldr	r5, [pc, #40]	; (8000744 <__libc_init_array+0x40>)
 800071c:	4c0a      	ldr	r4, [pc, #40]	; (8000748 <__libc_init_array+0x44>)
 800071e:	1b64      	subs	r4, r4, r5
 8000720:	10a4      	asrs	r4, r4, #2
 8000722:	42a6      	cmp	r6, r4
 8000724:	d105      	bne.n	8000732 <__libc_init_array+0x2e>
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f855 3b04 	ldr.w	r3, [r5], #4
 800072c:	4798      	blx	r3
 800072e:	3601      	adds	r6, #1
 8000730:	e7ee      	b.n	8000710 <__libc_init_array+0xc>
 8000732:	f855 3b04 	ldr.w	r3, [r5], #4
 8000736:	4798      	blx	r3
 8000738:	3601      	adds	r6, #1
 800073a:	e7f2      	b.n	8000722 <__libc_init_array+0x1e>
 800073c:	08000764 	.word	0x08000764
 8000740:	08000764 	.word	0x08000764
 8000744:	08000764 	.word	0x08000764
 8000748:	08000768 	.word	0x08000768

0800074c <_init>:
 800074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074e:	bf00      	nop
 8000750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000752:	bc08      	pop	{r3}
 8000754:	469e      	mov	lr, r3
 8000756:	4770      	bx	lr

08000758 <_fini>:
 8000758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800075a:	bf00      	nop
 800075c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800075e:	bc08      	pop	{r3}
 8000760:	469e      	mov	lr, r3
 8000762:	4770      	bx	lr
