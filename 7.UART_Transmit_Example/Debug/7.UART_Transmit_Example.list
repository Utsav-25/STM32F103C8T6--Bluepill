
7.UART_Transmit_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000480  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080005b0  080005b0  000105b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005c0  080005c0  000105c8  2**0
                  CONTENTS
  4 .ARM          00000000  080005c0  080005c0  000105c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005c0  080005c8  000105c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005c0  080005c0  000105c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005c4  080005c4  000105c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080005c8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080005c8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000105c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000668  00000000  00000000  000105f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001bf  00000000  00000000  00010c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00010e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00010ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fef4  00000000  00000000  00010f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000075c  00000000  00000000  00020e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000544a2  00000000  00000000  000215b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00075a52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000218  00000000  00000000  00075aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000598 	.word	0x08000598

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000598 	.word	0x08000598

08000170 <system_clk>:
#include <stdint.h>
#include<stm32f1xx.h>

void system_clk() // creating a function to configure STM32 clock.Refer project 1 for details
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	RCC->CR |= RCC_CR_HSEON; //HSE is 8Mhz in BluePill.
 8000174:	4b25      	ldr	r3, [pc, #148]	; (800020c <system_clk+0x9c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a24      	ldr	r2, [pc, #144]	; (800020c <system_clk+0x9c>)
 800017a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800017e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000180:	bf00      	nop
 8000182:	4b22      	ldr	r3, [pc, #136]	; (800020c <system_clk+0x9c>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800018a:	2b00      	cmp	r3, #0
 800018c:	d0f9      	beq.n	8000182 <system_clk+0x12>
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 800018e:	4b20      	ldr	r3, [pc, #128]	; (8000210 <system_clk+0xa0>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a1f      	ldr	r2, [pc, #124]	; (8000210 <system_clk+0xa0>)
 8000194:	f043 0310 	orr.w	r3, r3, #16
 8000198:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_1;
 800019a:	4b1d      	ldr	r3, [pc, #116]	; (8000210 <system_clk+0xa0>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a1c      	ldr	r2, [pc, #112]	; (8000210 <system_clk+0xa0>)
 80001a0:	f043 0302 	orr.w	r3, r3, #2
 80001a4:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80001a6:	4b19      	ldr	r3, [pc, #100]	; (800020c <system_clk+0x9c>)
 80001a8:	685b      	ldr	r3, [r3, #4]
 80001aa:	4a18      	ldr	r2, [pc, #96]	; (800020c <system_clk+0x9c>)
 80001ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001b0:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE;
 80001b2:	4b16      	ldr	r3, [pc, #88]	; (800020c <system_clk+0x9c>)
 80001b4:	4a15      	ldr	r2, [pc, #84]	; (800020c <system_clk+0x9c>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL4; // 8MHz * 4= 32Mhz of system clock
 80001ba:	4b14      	ldr	r3, [pc, #80]	; (800020c <system_clk+0x9c>)
 80001bc:	685b      	ldr	r3, [r3, #4]
 80001be:	4a13      	ldr	r2, [pc, #76]	; (800020c <system_clk+0x9c>)
 80001c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001c4:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV1 | RCC_CFGR_PPRE2_DIV1 | RCC_CFGR_HPRE_DIV1);
 80001c6:	4b11      	ldr	r3, [pc, #68]	; (800020c <system_clk+0x9c>)
 80001c8:	4a10      	ldr	r2, [pc, #64]	; (800020c <system_clk+0x9c>)
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 80001ce:	4b0f      	ldr	r3, [pc, #60]	; (800020c <system_clk+0x9c>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a0e      	ldr	r2, [pc, #56]	; (800020c <system_clk+0x9c>)
 80001d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001d8:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 80001da:	bf00      	nop
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <system_clk+0x9c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d0f9      	beq.n	80001dc <system_clk+0x6c>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <system_clk+0x9c>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <system_clk+0x9c>)
 80001ee:	f043 0302 	orr.w	r3, r3, #2
 80001f2:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 80001f4:	bf00      	nop
 80001f6:	4b05      	ldr	r3, [pc, #20]	; (800020c <system_clk+0x9c>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	f003 0308 	and.w	r3, r3, #8
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0f9      	beq.n	80001f6 <system_clk+0x86>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40021000 	.word	0x40021000
 8000210:	40022000 	.word	0x40022000

08000214 <timer2_init>:

void timer2_init() // creating a function to initialize the timer.Check Project 2 for details
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0

	TIM2->CR1 &= ~(TIM_CR1_CEN);
 8000218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000222:	f023 0301 	bic.w	r3, r3, #1
 8000226:	6013      	str	r3, [r2, #0]
	TIM2->SR &= ~(TIM_SR_UIF);
 8000228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800022c:	691b      	ldr	r3, [r3, #16]
 800022e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000232:	f023 0301 	bic.w	r3, r3, #1
 8000236:	6113      	str	r3, [r2, #16]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000238:	4b11      	ldr	r3, [pc, #68]	; (8000280 <timer2_init+0x6c>)
 800023a:	69db      	ldr	r3, [r3, #28]
 800023c:	4a10      	ldr	r2, [pc, #64]	; (8000280 <timer2_init+0x6c>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	61d3      	str	r3, [r2, #28]
	TIM2->EGR |= TIM_EGR_UG;
 8000244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6153      	str	r3, [r2, #20]
	TIM2->PSC = 32;
 8000254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000258:	2220      	movs	r2, #32
 800025a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 0xffff;
 800025c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000264:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_CEN; // enable the timer
 8000266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	6013      	str	r3, [r2, #0]
}
 8000276:	bf00      	nop
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40021000 	.word	0x40021000

08000284 <delay_us>:

void delay_us(uint16_t us)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	80fb      	strh	r3, [r7, #6]
	TIM2->CNT=0;
 800028e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000292:	2200      	movs	r2, #0
 8000294:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2->CNT< us);
 8000296:	bf00      	nop
 8000298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800029c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800029e:	88fb      	ldrh	r3, [r7, #6]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d3f9      	bcc.n	8000298 <delay_us+0x14>
}
 80002a4:	bf00      	nop
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr

080002b0 <delay_ms>:
void delay_ms(uint16_t ms)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0;i<ms;i++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	81fb      	strh	r3, [r7, #14]
 80002be:	e006      	b.n	80002ce <delay_ms+0x1e>
	delay_us(1000);
 80002c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c4:	f7ff ffde 	bl	8000284 <delay_us>
	for(uint16_t i=0;i<ms;i++)
 80002c8:	89fb      	ldrh	r3, [r7, #14]
 80002ca:	3301      	adds	r3, #1
 80002cc:	81fb      	strh	r3, [r7, #14]
 80002ce:	89fa      	ldrh	r2, [r7, #14]
 80002d0:	88fb      	ldrh	r3, [r7, #6]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d3f4      	bcc.n	80002c0 <delay_ms+0x10>
}
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <USART_PinConfig>:
	for(uint16_t i=0;i<sec;i++)
	delay_ms(1000);
}

void USART_PinConfig()
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	//enable the clock for USART2 and GPIOA pins
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Enable the clock to USART2
 80002e4:	4b13      	ldr	r3, [pc, #76]	; (8000334 <USART_PinConfig+0x54>)
 80002e6:	69db      	ldr	r3, [r3, #28]
 80002e8:	4a12      	ldr	r2, [pc, #72]	; (8000334 <USART_PinConfig+0x54>)
 80002ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002ee:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; //Enable clock to GPIOA
 80002f0:	4b10      	ldr	r3, [pc, #64]	; (8000334 <USART_PinConfig+0x54>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <USART_PinConfig+0x54>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; //Enable the Alternate function clock
 80002fc:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <USART_PinConfig+0x54>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a0c      	ldr	r2, [pc, #48]	; (8000334 <USART_PinConfig+0x54>)
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6193      	str	r3, [r2, #24]

	//configure the pin PA2 as output(TX) for alternate function
	GPIOA->CRL |= ( GPIO_CRL_MODE2_1 | GPIO_CRL_MODE2_0 ); //setting output speed of PA2 to max 50Mhz
 8000308:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <USART_PinConfig+0x58>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <USART_PinConfig+0x58>)
 800030e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000312:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF2_1;    //setting as Alternate function output push pull
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <USART_PinConfig+0x58>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a07      	ldr	r2, [pc, #28]	; (8000338 <USART_PinConfig+0x58>)
 800031a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800031e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(GPIO_CRL_CNF2_0); //setting as Alternate function output push pull
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <USART_PinConfig+0x58>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <USART_PinConfig+0x58>)
 8000326:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800032a:	6013      	str	r3, [r2, #0]
	//configure the pin PA3 as input(RX) for alternate function
	// As the defaults of PA3 are set as input, we do not need to make additional changes
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	40021000 	.word	0x40021000
 8000338:	40010800 	.word	0x40010800

0800033c <USART_BaudRate>:
void USART_BaudRate()
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	USART2->BRR = 0xd05; //for baud of 9600 at 32Mhz bus clock.
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <USART_BaudRate+0x14>)
 8000342:	f640 5205 	movw	r2, #3333	; 0xd05
 8000346:	609a      	str	r2, [r3, #8]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr
 8000350:	40004400 	.word	0x40004400

08000354 <USART_Init>:

void USART_Init()
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	USART_PinConfig(); //initialize the pins PA2 and PA3 as Tx and Rx
 8000358:	f7ff ffc2 	bl	80002e0 <USART_PinConfig>
	//Set up the baud rate
	USART_BaudRate();
 800035c:	f7ff ffee 	bl	800033c <USART_BaudRate>
	//Enable the USART, Transmit and Receive
	USART2->CR1 |= USART_CR1_UE; //enable the USART
 8000360:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <USART_Init+0x40>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <USART_Init+0x40>)
 8000366:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800036a:	60d3      	str	r3, [r2, #12]
	//setting the word length
	USART2->CR1 &= ~(USART_CR1_M); // 1 start bit, 8 data bits and n stop bit
 800036c:	4b09      	ldr	r3, [pc, #36]	; (8000394 <USART_Init+0x40>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	4a08      	ldr	r2, [pc, #32]	; (8000394 <USART_Init+0x40>)
 8000372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000376:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_TE;   //USART2 transmit enable
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <USART_Init+0x40>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <USART_Init+0x40>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;   //USART2 transmit enable
 8000384:	4b03      	ldr	r3, [pc, #12]	; (8000394 <USART_Init+0x40>)
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	4a02      	ldr	r2, [pc, #8]	; (8000394 <USART_Init+0x40>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	60d3      	str	r3, [r2, #12]

}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40004400 	.word	0x40004400

08000398 <USART_TransmitByte>:

//CREATING FUNCTIONS TO TRANSMIT AND RECEIVE DATA

void USART_TransmitByte(uint8_t byte)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & USART_SR_TXE)); // we are checking if the transmit data register is empty
 80003a2:	bf00      	nop
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <USART_TransmitByte+0x28>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0f9      	beq.n	80003a4 <USART_TransmitByte+0xc>
	USART2->DR = byte; //loading the contents to the data register
 80003b0:	4a03      	ldr	r2, [pc, #12]	; (80003c0 <USART_TransmitByte+0x28>)
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	6053      	str	r3, [r2, #4]
	//while(!(USART2->SR & USART_SR_TC)); // checking if the data transmit has been completed by checking the status of TC bit
}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40004400 	.word	0x40004400

080003c4 <USART_TransmitSrting>:
	while(!(USART2->SR & USART_SR_RXNE)); // we are checking if the data is received. RXNE is 1 when read data register is not empty
	return USART2->DR;
}

void USART_TransmitSrting( char *myString) // we are using a string pointer
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	while(*myString) //passing value by reference
 80003cc:	e006      	b.n	80003dc <USART_TransmitSrting+0x18>
		USART_TransmitByte(*myString++); // transmit the byte pointer by myString pointer
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	1c5a      	adds	r2, r3, #1
 80003d2:	607a      	str	r2, [r7, #4]
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff ffde 	bl	8000398 <USART_TransmitByte>
	while(*myString) //passing value by reference
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d1f4      	bne.n	80003ce <USART_TransmitSrting+0xa>
	while(!(USART2->SR & USART_SR_TC)); // checking if the data transmit has been completed by checking the status of TC bit
 80003e4:	bf00      	nop
 80003e6:	4b05      	ldr	r3, [pc, #20]	; (80003fc <USART_TransmitSrting+0x38>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0f9      	beq.n	80003e6 <USART_TransmitSrting+0x22>
}
 80003f2:	bf00      	nop
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40004400 	.word	0x40004400

08000400 <USART_NewLine>:

void USART_NewLine()
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	USART_TransmitByte('\n');
 8000404:	200a      	movs	r0, #10
 8000406:	f7ff ffc7 	bl	8000398 <USART_TransmitByte>
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <USART_TransmitNumber>:

int USART_TransmitNumber(uint32_t val)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	unsigned char buf[5];
	int8_t ptr;
	for(ptr=0;ptr<5;++ptr)
 8000418:	2300      	movs	r3, #0
 800041a:	73fb      	strb	r3, [r7, #15]
 800041c:	e01c      	b.n	8000458 <USART_TransmitNumber+0x48>
	{
		buf[ptr] = (val % 10) + '0';
 800041e:	6879      	ldr	r1, [r7, #4]
 8000420:	4b25      	ldr	r3, [pc, #148]	; (80004b8 <USART_TransmitNumber+0xa8>)
 8000422:	fba3 2301 	umull	r2, r3, r3, r1
 8000426:	08da      	lsrs	r2, r3, #3
 8000428:	4613      	mov	r3, r2
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	4413      	add	r3, r2
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	1aca      	subs	r2, r1, r3
 8000432:	b2d2      	uxtb	r2, r2
 8000434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000438:	3230      	adds	r2, #48	; 0x30
 800043a:	b2d2      	uxtb	r2, r2
 800043c:	3310      	adds	r3, #16
 800043e:	443b      	add	r3, r7
 8000440:	f803 2c08 	strb.w	r2, [r3, #-8]
		val /= 10;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <USART_TransmitNumber+0xa8>)
 8000448:	fba2 2303 	umull	r2, r3, r2, r3
 800044c:	08db      	lsrs	r3, r3, #3
 800044e:	607b      	str	r3, [r7, #4]
	for(ptr=0;ptr<5;++ptr)
 8000450:	7bfb      	ldrb	r3, [r7, #15]
 8000452:	3301      	adds	r3, #1
 8000454:	b2db      	uxtb	r3, r3
 8000456:	73fb      	strb	r3, [r7, #15]
 8000458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800045c:	2b04      	cmp	r3, #4
 800045e:	ddde      	ble.n	800041e <USART_TransmitNumber+0xe>
	}
	for(ptr=4;ptr>0;--ptr)
 8000460:	2304      	movs	r3, #4
 8000462:	73fb      	strb	r3, [r7, #15]
 8000464:	e00b      	b.n	800047e <USART_TransmitNumber+0x6e>
	{
		if (buf[ptr] != '0')
 8000466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800046a:	3310      	adds	r3, #16
 800046c:	443b      	add	r3, r7
 800046e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000472:	2b30      	cmp	r3, #48	; 0x30
 8000474:	d108      	bne.n	8000488 <USART_TransmitNumber+0x78>
	for(ptr=4;ptr>0;--ptr)
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	3b01      	subs	r3, #1
 800047a:	b2db      	uxtb	r3, r3
 800047c:	73fb      	strb	r3, [r7, #15]
 800047e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000482:	2b00      	cmp	r3, #0
 8000484:	dcef      	bgt.n	8000466 <USART_TransmitNumber+0x56>
 8000486:	e00e      	b.n	80004a6 <USART_TransmitNumber+0x96>
		break;
 8000488:	bf00      	nop
	}
	for(;ptr>=0;--ptr)
 800048a:	e00c      	b.n	80004a6 <USART_TransmitNumber+0x96>
	{
		USART_TransmitByte(buf[ptr]);
 800048c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000490:	3310      	adds	r3, #16
 8000492:	443b      	add	r3, r7
 8000494:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff7d 	bl	8000398 <USART_TransmitByte>
	for(;ptr>=0;--ptr)
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	73fb      	strb	r3, [r7, #15]
 80004a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	daee      	bge.n	800048c <USART_TransmitNumber+0x7c>
	}
}
 80004ae:	bf00      	nop
 80004b0:	4618      	mov	r0, r3
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	cccccccd 	.word	0xcccccccd

080004bc <main>:

int val=0;
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
    system_clk();
 80004c0:	f7ff fe56 	bl	8000170 <system_clk>
    timer2_init();
 80004c4:	f7ff fea6 	bl	8000214 <timer2_init>
    USART_Init();
 80004c8:	f7ff ff44 	bl	8000354 <USART_Init>

    while(1)
    {
    	USART_TransmitSrting("Hello World!");
 80004cc:	4809      	ldr	r0, [pc, #36]	; (80004f4 <main+0x38>)
 80004ce:	f7ff ff79 	bl	80003c4 <USART_TransmitSrting>
    	USART_TransmitNumber(val);
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <main+0x3c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ff9a 	bl	8000410 <USART_TransmitNumber>
    	USART_NewLine();
 80004dc:	f7ff ff90 	bl	8000400 <USART_NewLine>
    	delay_ms(1000);
 80004e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e4:	f7ff fee4 	bl	80002b0 <delay_ms>
    	val++;
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <main+0x3c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	3301      	adds	r3, #1
 80004ee:	4a02      	ldr	r2, [pc, #8]	; (80004f8 <main+0x3c>)
 80004f0:	6013      	str	r3, [r2, #0]
    	USART_TransmitSrting("Hello World!");
 80004f2:	e7eb      	b.n	80004cc <main+0x10>
 80004f4:	080005b0 	.word	0x080005b0
 80004f8:	2000001c 	.word	0x2000001c

080004fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000500:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <LoopForever+0x6>)
  ldr r1, =_edata
 8000506:	490d      	ldr	r1, [pc, #52]	; (800053c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <LoopForever+0xe>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800051c:	4c0a      	ldr	r4, [pc, #40]	; (8000548 <LoopForever+0x16>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800052a:	f000 f811 	bl	8000550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052e:	f7ff ffc5 	bl	80004bc <main>

08000532 <LoopForever>:

LoopForever:
    b LoopForever
 8000532:	e7fe      	b.n	8000532 <LoopForever>
  ldr   r0, =_estack
 8000534:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800053c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000540:	080005c8 	.word	0x080005c8
  ldr r2, =_sbss
 8000544:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000548:	20000020 	.word	0x20000020

0800054c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC1_2_IRQHandler>
	...

08000550 <__libc_init_array>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	2600      	movs	r6, #0
 8000554:	4d0c      	ldr	r5, [pc, #48]	; (8000588 <__libc_init_array+0x38>)
 8000556:	4c0d      	ldr	r4, [pc, #52]	; (800058c <__libc_init_array+0x3c>)
 8000558:	1b64      	subs	r4, r4, r5
 800055a:	10a4      	asrs	r4, r4, #2
 800055c:	42a6      	cmp	r6, r4
 800055e:	d109      	bne.n	8000574 <__libc_init_array+0x24>
 8000560:	f000 f81a 	bl	8000598 <_init>
 8000564:	2600      	movs	r6, #0
 8000566:	4d0a      	ldr	r5, [pc, #40]	; (8000590 <__libc_init_array+0x40>)
 8000568:	4c0a      	ldr	r4, [pc, #40]	; (8000594 <__libc_init_array+0x44>)
 800056a:	1b64      	subs	r4, r4, r5
 800056c:	10a4      	asrs	r4, r4, #2
 800056e:	42a6      	cmp	r6, r4
 8000570:	d105      	bne.n	800057e <__libc_init_array+0x2e>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f855 3b04 	ldr.w	r3, [r5], #4
 8000578:	4798      	blx	r3
 800057a:	3601      	adds	r6, #1
 800057c:	e7ee      	b.n	800055c <__libc_init_array+0xc>
 800057e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000582:	4798      	blx	r3
 8000584:	3601      	adds	r6, #1
 8000586:	e7f2      	b.n	800056e <__libc_init_array+0x1e>
 8000588:	080005c0 	.word	0x080005c0
 800058c:	080005c0 	.word	0x080005c0
 8000590:	080005c0 	.word	0x080005c0
 8000594:	080005c4 	.word	0x080005c4

08000598 <_init>:
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059a:	bf00      	nop
 800059c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059e:	bc08      	pop	{r3}
 80005a0:	469e      	mov	lr, r3
 80005a2:	4770      	bx	lr

080005a4 <_fini>:
 80005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a6:	bf00      	nop
 80005a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005aa:	bc08      	pop	{r3}
 80005ac:	469e      	mov	lr, r3
 80005ae:	4770      	bx	lr
