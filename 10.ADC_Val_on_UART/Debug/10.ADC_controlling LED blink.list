
10.ADC_controlling LED blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000418  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000548  08000550  00010550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000548  08000548  00010550  2**0
                  CONTENTS
  4 .ARM          00000000  08000548  08000548  00010550  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000548  08000550  00010550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000548  08000548  00010548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800054c  0800054c  0001054c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000550  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000550  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010550  2**0
                  CONTENTS, READONLY
 12 .debug_info   000005a0  00000000  00000000  00010579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a2  00000000  00000000  00010b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  00010d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fef4  00000000  00000000  00010d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000063d  00000000  00000000  00020c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054442  00000000  00000000  000212c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007570b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000120  00000000  00000000  0007575c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000530 	.word	0x08000530

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000530 	.word	0x08000530

08000170 <system_clk>:
#include <stdint.h>
#include "stm32f1xx.h"

void system_clk() // creating a function to configure STM32 clock.Refer project 1 for details
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	RCC->CR |= RCC_CR_HSEON; //HSE is 8Mhz in BluePill.
 8000174:	4b25      	ldr	r3, [pc, #148]	; (800020c <system_clk+0x9c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a24      	ldr	r2, [pc, #144]	; (800020c <system_clk+0x9c>)
 800017a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800017e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000180:	bf00      	nop
 8000182:	4b22      	ldr	r3, [pc, #136]	; (800020c <system_clk+0x9c>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800018a:	2b00      	cmp	r3, #0
 800018c:	d0f9      	beq.n	8000182 <system_clk+0x12>
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 800018e:	4b20      	ldr	r3, [pc, #128]	; (8000210 <system_clk+0xa0>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a1f      	ldr	r2, [pc, #124]	; (8000210 <system_clk+0xa0>)
 8000194:	f043 0310 	orr.w	r3, r3, #16
 8000198:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_1;
 800019a:	4b1d      	ldr	r3, [pc, #116]	; (8000210 <system_clk+0xa0>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a1c      	ldr	r2, [pc, #112]	; (8000210 <system_clk+0xa0>)
 80001a0:	f043 0302 	orr.w	r3, r3, #2
 80001a4:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80001a6:	4b19      	ldr	r3, [pc, #100]	; (800020c <system_clk+0x9c>)
 80001a8:	685b      	ldr	r3, [r3, #4]
 80001aa:	4a18      	ldr	r2, [pc, #96]	; (800020c <system_clk+0x9c>)
 80001ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001b0:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE;
 80001b2:	4b16      	ldr	r3, [pc, #88]	; (800020c <system_clk+0x9c>)
 80001b4:	4a15      	ldr	r2, [pc, #84]	; (800020c <system_clk+0x9c>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL4; // 8MHz * 4= 32Mhz of system clock
 80001ba:	4b14      	ldr	r3, [pc, #80]	; (800020c <system_clk+0x9c>)
 80001bc:	685b      	ldr	r3, [r3, #4]
 80001be:	4a13      	ldr	r2, [pc, #76]	; (800020c <system_clk+0x9c>)
 80001c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001c4:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RCC_CFGR_PPRE1_DIV1 | RCC_CFGR_PPRE2_DIV1 | RCC_CFGR_HPRE_DIV1);
 80001c6:	4b11      	ldr	r3, [pc, #68]	; (800020c <system_clk+0x9c>)
 80001c8:	4a10      	ldr	r2, [pc, #64]	; (800020c <system_clk+0x9c>)
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 80001ce:	4b0f      	ldr	r3, [pc, #60]	; (800020c <system_clk+0x9c>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a0e      	ldr	r2, [pc, #56]	; (800020c <system_clk+0x9c>)
 80001d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001d8:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 80001da:	bf00      	nop
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <system_clk+0x9c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d0f9      	beq.n	80001dc <system_clk+0x6c>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <system_clk+0x9c>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <system_clk+0x9c>)
 80001ee:	f043 0302 	orr.w	r3, r3, #2
 80001f2:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 80001f4:	bf00      	nop
 80001f6:	4b05      	ldr	r3, [pc, #20]	; (800020c <system_clk+0x9c>)
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	f003 0308 	and.w	r3, r3, #8
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0f9      	beq.n	80001f6 <system_clk+0x86>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40021000 	.word	0x40021000
 8000210:	40022000 	.word	0x40022000

08000214 <timer2_init>:
void timer2_init() // creating a function to initialize the timer.Check Project 2 for details
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0

	TIM2->CR1 &= ~(TIM_CR1_CEN);
 8000218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000222:	f023 0301 	bic.w	r3, r3, #1
 8000226:	6013      	str	r3, [r2, #0]
	TIM2->SR &= ~(TIM_SR_UIF);
 8000228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800022c:	691b      	ldr	r3, [r3, #16]
 800022e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000232:	f023 0301 	bic.w	r3, r3, #1
 8000236:	6113      	str	r3, [r2, #16]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000238:	4b11      	ldr	r3, [pc, #68]	; (8000280 <timer2_init+0x6c>)
 800023a:	69db      	ldr	r3, [r3, #28]
 800023c:	4a10      	ldr	r2, [pc, #64]	; (8000280 <timer2_init+0x6c>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	61d3      	str	r3, [r2, #28]
	TIM2->EGR |= TIM_EGR_UG;
 8000244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6153      	str	r3, [r2, #20]
	TIM2->PSC = 32;
 8000254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000258:	2220      	movs	r2, #32
 800025a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 0xffff;
 800025c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000264:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_CEN; // enable the timer
 8000266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	6013      	str	r3, [r2, #0]
}
 8000276:	bf00      	nop
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40021000 	.word	0x40021000

08000284 <delay_us>:
void delay_us(uint16_t us)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	80fb      	strh	r3, [r7, #6]
	TIM2->CNT=0;
 800028e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000292:	2200      	movs	r2, #0
 8000294:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM2->CNT< us);
 8000296:	bf00      	nop
 8000298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800029c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800029e:	88fb      	ldrh	r3, [r7, #6]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d3f9      	bcc.n	8000298 <delay_us+0x14>
}
 80002a4:	bf00      	nop
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr

080002b0 <delay_ms>:
void delay_ms(uint16_t ms)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0;i<ms;i++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	81fb      	strh	r3, [r7, #14]
 80002be:	e006      	b.n	80002ce <delay_ms+0x1e>
	delay_us(1000);
 80002c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c4:	f7ff ffde 	bl	8000284 <delay_us>
	for(uint16_t i=0;i<ms;i++)
 80002c8:	89fb      	ldrh	r3, [r7, #14]
 80002ca:	3301      	adds	r3, #1
 80002cc:	81fb      	strh	r3, [r7, #14]
 80002ce:	89fa      	ldrh	r2, [r7, #14]
 80002d0:	88fb      	ldrh	r3, [r7, #6]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d3f4      	bcc.n	80002c0 <delay_ms+0x10>
}
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <ADC_init>:


int val=0; // to store the ADC value
void ADC_init() //using ADC1 and GPIOA Pin 5 (PA5)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//Configuring ADC1 and using the ADC5 i.e. PA5 pin of STM32 for analog reading
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80002e4:	4b3d      	ldr	r3, [pc, #244]	; (80003dc <ADC_init+0xfc>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a3c      	ldr	r2, [pc, #240]	; (80003dc <ADC_init+0xfc>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;	// enabling the clock to the ADC peripheral
 80002f0:	4b3a      	ldr	r3, [pc, #232]	; (80003dc <ADC_init+0xfc>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a39      	ldr	r2, [pc, #228]	; (80003dc <ADC_init+0xfc>)
 80002f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002fa:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; // enabling the alternate function
 80002fc:	4b37      	ldr	r3, [pc, #220]	; (80003dc <ADC_init+0xfc>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a36      	ldr	r2, [pc, #216]	; (80003dc <ADC_init+0xfc>)
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= ~(GPIO_CRL_CNF5_1); 	//setting GPIO configuration as analog input mode
 8000308:	4b35      	ldr	r3, [pc, #212]	; (80003e0 <ADC_init+0x100>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <ADC_init+0x100>)
 800030e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000312:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(GPIO_CRL_CNF5_0);   //setting GPIO configuration as analog input mode
 8000314:	4b32      	ldr	r3, [pc, #200]	; (80003e0 <ADC_init+0x100>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a31      	ldr	r2, [pc, #196]	; (80003e0 <ADC_init+0x100>)
 800031a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800031e:	6013      	str	r3, [r2, #0]
	// The mode of all pins is by default set as input, no bits to be set in the MODE bits

	ADC1->CR2 &= ~(ADC_CR2_ADON); //disabling the ADC prior to any configurations
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <ADC_init+0x104>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4a2f      	ldr	r2, [pc, #188]	; (80003e4 <ADC_init+0x104>)
 8000326:	f023 0301 	bic.w	r3, r3, #1
 800032a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV4 ; // dividing the bus clock by 4. So we get 8Mhz for 32 Mhz bus clock
 800032c:	4b2b      	ldr	r3, [pc, #172]	; (80003dc <ADC_init+0xfc>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	4a2a      	ldr	r2, [pc, #168]	; (80003dc <ADC_init+0xfc>)
 8000332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000336:	6053      	str	r3, [r2, #4]
	ADC1->SMPR2 |= ADC_SMPR2_SMP5_0; // setting the max sample time for better readings
 8000338:	4b2a      	ldr	r3, [pc, #168]	; (80003e4 <ADC_init+0x104>)
 800033a:	691b      	ldr	r3, [r3, #16]
 800033c:	4a29      	ldr	r2, [pc, #164]	; (80003e4 <ADC_init+0x104>)
 800033e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000342:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= ADC_SMPR2_SMP5_1; // setting the max sample time for better readings
 8000344:	4b27      	ldr	r3, [pc, #156]	; (80003e4 <ADC_init+0x104>)
 8000346:	691b      	ldr	r3, [r3, #16]
 8000348:	4a26      	ldr	r2, [pc, #152]	; (80003e4 <ADC_init+0x104>)
 800034a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800034e:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= ADC_SMPR2_SMP5_2; // setting the max sample time for better readings
 8000350:	4b24      	ldr	r3, [pc, #144]	; (80003e4 <ADC_init+0x104>)
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	4a23      	ldr	r2, [pc, #140]	; (80003e4 <ADC_init+0x104>)
 8000356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035a:	6113      	str	r3, [r2, #16]
	ADC1->SQR3 |= ADC_SQR3_SQ1_0; 	//setting up channel 5 as first sequence
 800035c:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <ADC_init+0x104>)
 800035e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000360:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <ADC_init+0x104>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= ADC_SQR3_SQ1_2; 	//setting up channel 5 as first sequence
 8000368:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <ADC_init+0x104>)
 800036a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800036c:	4a1d      	ldr	r2, [pc, #116]	; (80003e4 <ADC_init+0x104>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 &= ~(ADC_SQR3_SQ1_1);//setting up channel 5 as first sequence
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <ADC_init+0x104>)
 8000376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000378:	4a1a      	ldr	r2, [pc, #104]	; (80003e4 <ADC_init+0x104>)
 800037a:	f023 0302 	bic.w	r3, r3, #2
 800037e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 &= ~(ADC_SQR3_SQ1_3);//setting up channel 5 as first sequence
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <ADC_init+0x104>)
 8000382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000384:	4a17      	ldr	r2, [pc, #92]	; (80003e4 <ADC_init+0x104>)
 8000386:	f023 0308 	bic.w	r3, r3, #8
 800038a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->CR2 |= ADC_CR2_CONT; //enabling the continuous mode
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <ADC_init+0x104>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	4a14      	ldr	r2, [pc, #80]	; (80003e4 <ADC_init+0x104>)
 8000392:	f043 0302 	orr.w	r3, r3, #2
 8000396:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_ADON; //enabling the ADC
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <ADC_init+0x104>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	4a11      	ldr	r2, [pc, #68]	; (80003e4 <ADC_init+0x104>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	6093      	str	r3, [r2, #8]
	delay_ms(1); // slight delay
 80003a4:	2001      	movs	r0, #1
 80003a6:	f7ff ff83 	bl	80002b0 <delay_ms>
	ADC1->CR2 |= ADC_CR2_ADON; //enabling the ADC for 2nd time to actually enable ADC
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <ADC_init+0x104>)
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <ADC_init+0x104>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_CAL; // enable the calibration. The bit turns 0 when calibration is completed
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <ADC_init+0x104>)
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <ADC_init+0x104>)
 80003bc:	f043 0304 	orr.w	r3, r3, #4
 80003c0:	6093      	str	r3, [r2, #8]
	while(ADC1->CR2 & ADC_CR2_CAL); // wait until the calibration is completed.
 80003c2:	bf00      	nop
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <ADC_init+0x104>)
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	f003 0304 	and.w	r3, r3, #4
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d1f9      	bne.n	80003c4 <ADC_init+0xe4>
	delay_ms(1); // slight delay
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff ff6d 	bl	80002b0 <delay_ms>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010800 	.word	0x40010800
 80003e4:	40012400 	.word	0x40012400

080003e8 <ADC_Read>:
int ADC_Read()
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	while(!(ADC1->SR & ADC_SR_EOC));
 80003ec:	bf00      	nop
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <ADC_Read+0x20>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f003 0302 	and.w	r3, r3, #2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0f9      	beq.n	80003ee <ADC_Read+0x6>
	return ADC1->DR;
 80003fa:	4b03      	ldr	r3, [pc, #12]	; (8000408 <ADC_Read+0x20>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80003fe:	4618      	mov	r0, r3
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40012400 	.word	0x40012400

0800040c <main>:

int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
system_clk();
 8000410:	f7ff feae 	bl	8000170 <system_clk>
timer2_init();
 8000414:	f7ff fefe 	bl	8000214 <timer2_init>
ADC_init();
 8000418:	f7ff ff62 	bl	80002e0 <ADC_init>

RCC->APB2ENR |= RCC_APB2ENR_IOPCEN; // enabling the clock source for GPIOC register.
 800041c:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <main+0x7c>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a19      	ldr	r2, [pc, #100]	; (8000488 <main+0x7c>)
 8000422:	f043 0310 	orr.w	r3, r3, #16
 8000426:	6193      	str	r3, [r2, #24]
GPIOC->CRH |= (GPIO_CRH_MODE13_1 | GPIO_CRH_MODE13_0); // enable max speed to 50Mhz.
 8000428:	4b18      	ldr	r3, [pc, #96]	; (800048c <main+0x80>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	4a17      	ldr	r2, [pc, #92]	; (800048c <main+0x80>)
 800042e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000432:	6053      	str	r3, [r2, #4]
GPIOC->CRH &= ~(GPIO_CRH_CNF13_1 | GPIO_CRH_CNF13_0 );
 8000434:	4b15      	ldr	r3, [pc, #84]	; (800048c <main+0x80>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	4a14      	ldr	r2, [pc, #80]	; (800048c <main+0x80>)
 800043a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800043e:	6053      	str	r3, [r2, #4]


	while(1)
	{

		val= ADC_Read();
 8000440:	f7ff ffd2 	bl	80003e8 <ADC_Read>
 8000444:	4603      	mov	r3, r0
 8000446:	4a12      	ldr	r2, [pc, #72]	; (8000490 <main+0x84>)
 8000448:	6013      	str	r3, [r2, #0]
		GPIOC->ODR |= GPIO_ODR_ODR13;  	// using the Output data register(ODR) to set the pin high
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <main+0x80>)
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	4a0f      	ldr	r2, [pc, #60]	; (800048c <main+0x80>)
 8000450:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000454:	60d3      	str	r3, [r2, #12]
		delay_ms(val/2);
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <main+0x84>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	0fda      	lsrs	r2, r3, #31
 800045c:	4413      	add	r3, r2
 800045e:	105b      	asrs	r3, r3, #1
 8000460:	b29b      	uxth	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff24 	bl	80002b0 <delay_ms>
		GPIOC->ODR &= ~(GPIO_ODR_ODR13);// using the Output data register(ODR) to set the pin low
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <main+0x80>)
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	4a07      	ldr	r2, [pc, #28]	; (800048c <main+0x80>)
 800046e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000472:	60d3      	str	r3, [r2, #12]
		delay_ms(val/2);
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <main+0x84>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	0fda      	lsrs	r2, r3, #31
 800047a:	4413      	add	r3, r2
 800047c:	105b      	asrs	r3, r3, #1
 800047e:	b29b      	uxth	r3, r3
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ff15 	bl	80002b0 <delay_ms>
		val= ADC_Read();
 8000486:	e7db      	b.n	8000440 <main+0x34>
 8000488:	40021000 	.word	0x40021000
 800048c:	40011000 	.word	0x40011000
 8000490:	2000001c 	.word	0x2000001c

08000494 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000494:	480d      	ldr	r0, [pc, #52]	; (80004cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000496:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000498:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800049c:	480c      	ldr	r0, [pc, #48]	; (80004d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800049e:	490d      	ldr	r1, [pc, #52]	; (80004d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a0:	4a0d      	ldr	r2, [pc, #52]	; (80004d8 <LoopForever+0xe>)
  movs r3, #0
 80004a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a4:	e002      	b.n	80004ac <LoopCopyDataInit>

080004a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004aa:	3304      	adds	r3, #4

080004ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b0:	d3f9      	bcc.n	80004a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b2:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b4:	4c0a      	ldr	r4, [pc, #40]	; (80004e0 <LoopForever+0x16>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b8:	e001      	b.n	80004be <LoopFillZerobss>

080004ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004bc:	3204      	adds	r2, #4

080004be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c0:	d3fb      	bcc.n	80004ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004c2:	f000 f811 	bl	80004e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004c6:	f7ff ffa1 	bl	800040c <main>

080004ca <LoopForever>:

LoopForever:
    b LoopForever
 80004ca:	e7fe      	b.n	80004ca <LoopForever>
  ldr   r0, =_estack
 80004cc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80004d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004d8:	08000550 	.word	0x08000550
  ldr r2, =_sbss
 80004dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004e0:	20000020 	.word	0x20000020

080004e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e4:	e7fe      	b.n	80004e4 <ADC1_2_IRQHandler>
	...

080004e8 <__libc_init_array>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	2600      	movs	r6, #0
 80004ec:	4d0c      	ldr	r5, [pc, #48]	; (8000520 <__libc_init_array+0x38>)
 80004ee:	4c0d      	ldr	r4, [pc, #52]	; (8000524 <__libc_init_array+0x3c>)
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	10a4      	asrs	r4, r4, #2
 80004f4:	42a6      	cmp	r6, r4
 80004f6:	d109      	bne.n	800050c <__libc_init_array+0x24>
 80004f8:	f000 f81a 	bl	8000530 <_init>
 80004fc:	2600      	movs	r6, #0
 80004fe:	4d0a      	ldr	r5, [pc, #40]	; (8000528 <__libc_init_array+0x40>)
 8000500:	4c0a      	ldr	r4, [pc, #40]	; (800052c <__libc_init_array+0x44>)
 8000502:	1b64      	subs	r4, r4, r5
 8000504:	10a4      	asrs	r4, r4, #2
 8000506:	42a6      	cmp	r6, r4
 8000508:	d105      	bne.n	8000516 <__libc_init_array+0x2e>
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000510:	4798      	blx	r3
 8000512:	3601      	adds	r6, #1
 8000514:	e7ee      	b.n	80004f4 <__libc_init_array+0xc>
 8000516:	f855 3b04 	ldr.w	r3, [r5], #4
 800051a:	4798      	blx	r3
 800051c:	3601      	adds	r6, #1
 800051e:	e7f2      	b.n	8000506 <__libc_init_array+0x1e>
 8000520:	08000548 	.word	0x08000548
 8000524:	08000548 	.word	0x08000548
 8000528:	08000548 	.word	0x08000548
 800052c:	0800054c 	.word	0x0800054c

08000530 <_init>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	bf00      	nop
 8000534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000536:	bc08      	pop	{r3}
 8000538:	469e      	mov	lr, r3
 800053a:	4770      	bx	lr

0800053c <_fini>:
 800053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053e:	bf00      	nop
 8000540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000542:	bc08      	pop	{r3}
 8000544:	469e      	mov	lr, r3
 8000546:	4770      	bx	lr
